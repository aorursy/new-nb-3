import numpy as np # linear algebra

import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)



import os

print(os.listdir("../input"))



from tqdm import tqdm

import time

import matplotlib.pyplot as plt

import seaborn as sns

from sklearn.cluster import KMeans

from math import pi

import re

sns.set()

data = pd.read_csv('../input/train.csv',chunksize=10)

type(data)
sample_chunk = None

for chunk in data:

    sample_chunk = chunk

    print(sample_chunk)

    break
type(sample_chunk)
sample_chunk.head()
dtypes = {

        'MachineIdentifier':                                    'object',

        'ProductName':                                          'object',

        'EngineVersion':                                        'object',

        'AppVersion':                                           'object',

        'AvSigVersion':                                         'object',

        'IsBeta':                                               'int8',

        'RtpStateBitfield':                                     'float16',

        'IsSxsPassiveMode':                                     'int8',

        'DefaultBrowsersIdentifier':                            'float16',

        'AVProductStatesIdentifier':                            'float32',

        'AVProductsInstalled':                                  'float16',

        'AVProductsEnabled':                                    'float16',

        'HasTpm':                                               'int8',

        'CountryIdentifier':                                    'int16',

        'CityIdentifier':                                       'float32',

        'OrganizationIdentifier':                               'float16',

        'GeoNameIdentifier':                                    'float16',

        'LocaleEnglishNameIdentifier':                          'int8',

        'Platform':                                             'object',

        'Processor':                                            'object',

        'OsVer':                                                'object',

        'OsBuild':                                              'int16',

        'OsSuite':                                              'int16',

        'OsPlatformSubRelease':                                 'object',

        'OsBuildLab':                                           'object',

        'SkuEdition':                                           'object',

        'IsProtected':                                          'float16',

        'AutoSampleOptIn':                                      'int8',

        'PuaMode':                                              'object',

        'SMode':                                                'float16',

        'IeVerIdentifier':                                      'float16',

        'SmartScreen':                                          'object',

        'Firewall':                                             'float16',

        'UacLuaenable':                                         'float32',

        'Census_MDC2FormFactor':                                'object',

        'Census_DeviceFamily':                                  'object',

        'Census_OEMNameIdentifier':                             'float16',

        'Census_OEMModelIdentifier':                            'float32',

        'Census_ProcessorCoreCount':                            'float16',

        'Census_ProcessorManufacturerIdentifier':               'float16',

        'Census_ProcessorModelIdentifier':                      'float16',

        'Census_ProcessorClass':                                'object',

        'Census_PrimaryDiskTotalCapacity':                      'float32',

        'Census_PrimaryDiskTypeName':                           'object',

        'Census_SystemVolumeTotalCapacity':                     'float32',

        'Census_HasOpticalDiskDrive':                           'int8',

        'Census_TotalPhysicalRAM':                              'float32',

        'Census_ChassisTypeName':                               'object',

        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',

        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',

        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',

        'Census_PowerPlatformRoleName':                         'object',

        'Census_InternalBatteryType':                           'object',

        'Census_InternalBatteryNumberOfCharges':                'float32',

        'Census_OSVersion':                                     'object',

        'Census_OSArchitecture':                                'object',

        'Census_OSBranch':                                      'object',

        'Census_OSBuildNumber':                                 'int16',

        'Census_OSBuildRevision':                               'int32',

        'Census_OSEdition':                                     'object',

        'Census_OSSkuName':                                     'object',

        'Census_OSInstallTypeName':                             'object',

        'Census_OSInstallLanguageIdentifier':                   'float16',

        'Census_OSUILocaleIdentifier':                          'int16',

        'Census_OSWUAutoUpdateOptionsName':                     'object',

        'Census_IsPortableOperatingSystem':                     'int8',

        'Census_GenuineStateName':                              'object',

        'Census_ActivationChannel':                             'object',

        'Census_IsFlightingInternal':                           'float16',

        'Census_IsFlightsDisabled':                             'float16',

        'Census_FlightRing':                                    'object',

        'Census_ThresholdOptIn':                                'float16',

        'Census_FirmwareManufacturerIdentifier':                'float16',

        'Census_FirmwareVersionIdentifier':                     'float32',

        'Census_IsSecureBootEnabled':                           'int8',

        'Census_IsWIMBootEnabled':                              'float16',

        'Census_IsVirtualDevice':                               'float16',

        'Census_IsTouchEnabled':                                'int8',

        'Census_IsPenCapable':                                  'int8',

        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',

        'Wdft_IsGamer':                                         'float16',

        'Wdft_RegionIdentifier':                                'float16',

        'HasDetections':                                        'int8'

        }
start = time.clock()

df = pd.read_csv('../input/train.csv',dtype=dtypes)

end = time.clock()

print("Start Time: {}".format(start))

print("End Time: {}".format(end))
start = time.clock()

df.duplicated().sum()

end = time.clock()

print("Start Time: {}".format(start))

print("End Time: {}".format(end))
df.info()
df.isnull().sum()
sns.set(style='ticks', palette='Paired')
hasDetected = df['HasDetections'].sum()

hasnotDetected = 8921483 - hasDetected 

plt.figure(figsize=(6, 6))

# data

names = ['Has Detected', 'Has Not Detected']

size = [hasDetected, hasnotDetected]



# Create a circle for the center of the plot

my_circle = plt.Circle( (0,0), 0.7, color='white')



# Give color names

plt.pie(size, labels = names, autopct='%1.1f%%')

p = plt.gcf()

p.gca().add_artist(my_circle)

plt.show()
plt.figure(figsize=(10, 4))

sns.countplot(x='ProductName', hue='HasDetections', data=df);
plt.figure(figsize=(15, 4))

plt.xticks(rotation=90)

sns.countplot(x='EngineVersion', hue='HasDetections', data=df);
plt.figure(figsize=(10, 4))

sns.countplot(x='Processor', hue='HasDetections', data=df);
plt.figure(figsize=(20, 5))

sns.countplot(x='Census_PowerPlatformRoleName', hue='HasDetections', data=df);
plt.figure(figsize=(20, 4))

plt.xticks(rotation=90)

sns.countplot(x='Census_InternalBatteryType', hue='HasDetections', data=df);
plt.figure(figsize=(10, 4))

sns.countplot(x='Census_OSArchitecture', hue='HasDetections', data=df);
plt.figure(figsize=(15, 4))

plt.xticks(rotation=90)

sns.countplot(x='Census_OSBranch', hue='HasDetections', data=df);
plt.figure(figsize=(15, 4))

plt.xticks(rotation=90)

sns.countplot(x='Census_OSEdition', hue='HasDetections', data=df);
plt.figure(figsize=(15, 5))

sns.countplot(x='Census_OSInstallTypeName', hue='HasDetections', data=df);
plt.figure(figsize=(10, 5))

sns.countplot(y='Census_OSWUAutoUpdateOptionsName', hue='HasDetections', data=df);
plt.figure(figsize=(10, 5))

sns.countplot(x='Census_GenuineStateName', hue='HasDetections', data=df);
plt.figure(figsize=(10, 5))

sns.countplot(x='Census_FlightRing', hue='HasDetections', data=df);
dff = df.copy()

# ------- PART 1: Create background



# number of variable

categories=list(dff)[1:]

N = len(categories)



# What will be the angle of each axis in the plot? (we divide the plot / number of variable)

angles = [n / float(N) * 2 * pi for n in range(N)]

angles += angles[:1]



# Initialise the spider plot

ax = plt.subplot(111, polar=True)



# If you want the first axis to be on top:

ax.set_theta_offset(pi / 2)

ax.set_theta_direction(-1)



# Draw one axe per variable + add labels labels yet

plt.xticks(angles[:-1], categories)



# Draw ylabels

ax.set_rlabel_position(0)

plt.yticks([20,50,60], ["20","50","60"], color="grey", size=7)

plt.ylim(0,60)



fig_size = plt.rcParams["figure.figsize"]



fig_size[0] = 30

fig_size[1] = 30

plt.rcParams["figure.figsize"] = fig_size

print(fig_size)

# ------- PART 2: Add plots



# Plot each individual = each line of the data

# Ind

values=dff.loc[0].drop('HasDetections').values.flatten().tolist()

values += values[:1]

ax.plot(angles, values, linewidth=1, linestyle='solid', label="HasDetections")

ax.fill(angles, values, 'b', alpha=0.1)





# Add legend

plt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))