# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# Any results you write to the current directory are saved as output.
data=pd.read_csv('/kaggle/input/pubg-finish-placement-prediction/train_V2.csv')
data.head(5)
data.shape
data.info()
data.describe()
data['matchType'].unique()
data=data.astype({'matchType':'category'})
data.info()
def pdfcdf(x,bins):
    counts, edges=np.histogram(x, bins=bins)
    pdf=counts/sum(counts)
    cdf=np.cumsum(pdf)
    plt.plot(edges[1:],pdf, label='Probabilty Density Function')
    plt.plot(edges[1:],cdf, label='Cumilative Density Function')
    plt.title('Probability and Cumulative density graphs')
    plt.legend(loc="right")
def assess_discreet(x):
    print(x.value_counts())
    sns.boxplot(x)
    plt.show()
    x.value_counts().plot(kind='pie', autopct='%0.2f')
    plt.show()
    pdfcdf(x,int(x.max()))
    plt.show()
def assess_continuous(x):
    sns.violinplot(x)
    plt.title('Violin plot of all the players')
    plt.show()
    sns.distplot(x,rug=True)
    plt.title('Distplot for all the players')
    plt.show()
    pdfcdf(x,int(x.max()))
    plt.title('Distribution functions for all players')
    plt.show()
def most_players(x):
    sns.distplot(x[x<x.quantile(0.90)],rug=True, color='orange')
    plt.title('Distplot for 90% players')
sns.boxplot(data['winPlacePerc'])
data['matchType'].value_counts()
data['matchType'].value_counts().plot(kind='pie', autopct='%0.2f')
assess_discreet(data['assists'])
plt.hist(data['assists'], bins=22)
assess_discreet(data['boosts'])
plt.hist(data['boosts'], bins=33)
assess_continuous(data['damageDealt'])
most_players(data['damageDealt'])
assess_discreet(data['DBNOs'])
most_players(data['DBNOs'])
assess_discreet(data['headshotKills'])
data['heals'].unique()
assess_discreet(data['heals'])
most_players(data['heals'])
sns.boxplot(data['killPlace'])
plt.show()
pdfcdf(data['killPlace'],100)
assess_continuous(data['killPoints'])
assess_discreet(data['kills'])
most_players(data['kills'])
print('Percentage of players who did not kill a single player={0:.03f}%'.format(len(data[data['kills']==0])/len(data)*100))
print('Maximum number of kills in a match=',data['kills'].max())
data['killStreaks'].unique()
assess_discreet(data['killStreaks'])
assess_continuous(data['longestKill'])
most_players(data['longestKill'])
print('Percentage of meelee/point-blank attacks={0:.3f}%'.format((len(data[data['longestKill']==0])/len(data)*100)))
print('Average kill distance={0:.3f}m'.format(np.mean(data['longestKill'])))
print('Longest kill distance={0:.3f}m'.format(data['longestKill'].max()))
assess_continuous(data['matchDuration'])
#Finding upper and lower quartiles
print('Most common range of match duration={}s to {}s'.format(np.percentile(data['matchDuration'],25),np.percentile(data['matchDuration'],75)))
data['maxPlace'].unique()
assess_discreet(data['maxPlace'])
data['numGroups'].unique()
len(data['numGroups'].unique())
assess_discreet(data['numGroups'])
data[['numGroups','maxPlace']].corr()
assess_continuous(data['rankPoints'])
most_players(data['rankPoints'])
print('Range of ranks={} to {}'.format(data['rankPoints'].min(),data['rankPoints'].max()))
print('Percentage of new players={0:.4}%'.format(len(data[data['rankPoints']==-1])/len(data)*100))
data['revives'].unique()
assess_discreet(data['revives'])
assess_continuous(data['rideDistance'])
#Finding upper and lower quartiles of players who have used a vehicle
print('Most common distance ridden in matches={}m to {}m'.format(np.percentile(data[data['rideDistance']!=0]['rideDistance'],25),np.percentile(data[data['rideDistance']!=0]['rideDistance'],75)))
#games where ride distance =0 (no vehicle was ridden)
print('Percentage of games where players do not use a vehicle={0:.03f}%'.format((len(data[data['rideDistance']==0])/len(data)*100)))
assess_discreet(data['roadKills'])
sns.violinplot(data['swimDistance'])
pdfcdf(data['swimDistance'],40)
#Finding upper and lower quartiles of players who have swam at all
print('Most common distance swam in matches={}m to {}m'.format(np.percentile(data[data['swimDistance']!=0]['swimDistance'],25),np.percentile(data[data['swimDistance']!=0]['swimDistance'],75)))
#games where ride distance =0 (no vehicle was ridden)
print('Percentage of games where players do not use a vehicle={0:.03f}%'.format((len(data[data['rideDistance']==0])/len(data)*100)))
data['teamKills'].unique()
assess_discreet(data['teamKills'])
assess_discreet(data['vehicleDestroys'])
print('Maximum vehicles destroyed by a player in a game=',data['vehicleDestroys'].max())
assess_continuous(data['walkDistance'])
most_players(data['walkDistance'])
#Finding upper and lower quartiles of players who have swam at all
print('Most common distance swam in matches={}m to {}m'.format(np.percentile(data['walkDistance'],25),np.percentile(data['walkDistance'],75)))
print('Average ride distance=',np.mean(data['rideDistance']))
print('Median ride distance=',np.median(data['rideDistance']))
print('Average walk distance=',np.mean(data['walkDistance']))
print('Median walk distance=',np.median(data['walkDistance']))
data['weaponsAcquired'].unique()
assess_discreet(data['weaponsAcquired'])
#Finding upper and lower quartiles of players picking up weapons
print('Most common number of weapons acquired={} to {}'.format(np.percentile(data['weaponsAcquired'],25),np.percentile(data['weaponsAcquired'],75)))
#1.5* IQR
print('Upper outlier=',1.5*(5-2))
#Taking 11 as maximum by excluding outliers
plt.hist(data[data['weaponsAcquired']<=11]['weaponsAcquired'], bins=11)
len(data['winPoints'].unique())
min(data[data['winPoints']>0]['winPoints'])
assess_continuous(data['winPoints'])
f,ax = plt.subplots(figsize=(10, 10))
sns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f', label='Correlation between variables',ax=ax)
f,ax = plt.subplots(figsize=(10, 10))
print('Heatmap of correlations where the players have won the match:')
sns.heatmap(data[data['winPlacePerc']==1].corr(), annot=True, linewidths=.5, fmt= '.1f', label='Correlation between variables',ax=ax)
print('Correlations of all variables with winning position percentage')
print(data.corr().loc['winPlacePerc',:])
sns.jointplot(x='winPlacePerc',y='assists',data=data)
sns.jointplot(x='winPlacePerc',y='damageDealt',data=data, color='r')
sns.jointplot(x='winPlacePerc',y='DBNOs',data=data, color='orange')
sns.jointplot(x='winPlacePerc',y='kills',data=data, color='grey')

sns.jointplot(x='winPlacePerc',y='killPlace',data=data, color='lime')
sns.jointplot(x='winPlacePerc',y='teamKills',data=data, color='blue')
f,ax = plt.subplots(figsize =(20,10))
sns.lineplot(x='assists', y='winPlacePerc', data=data, color='black',ax=ax)
sns.lineplot(x='DBNOs', y='winPlacePerc', data=data, color='orange', ax=ax)
sns.lineplot(x='kills', y='winPlacePerc', data=data, color='grey', ax=ax)
sns.lineplot(x='killPlace', y='winPlacePerc', data=data, color='lime', ax=ax)
#Selecting only teams games for team kills
sns.lineplot(x='teamKills', y='winPlacePerc', data=data[data['numGroups']>25], color='blue', ax=ax)
plt.text(80,0.8,'Assists',fontsize = 17,style = 'italic')
plt.text(80,0.75,'Knockouts',color='orange',fontsize = 17,style = 'italic')
plt.text(80,0.70,'Kills',color='grey',fontsize = 17,style = 'italic')
plt.text(80,0.65,'Kill rank',color='lime',fontsize = 17,style = 'italic')
plt.text(80,0.60,'Team kills',color='blue',fontsize = 17,style = 'italic')
plt.xlabel('Tactical moves')
plt.grid()
plt.show()
sns.jointplot(x='winPlacePerc',y='boosts',data=data, color='red')
sns.jointplot(x='winPlacePerc',y='heals',data=data, color='lime')
sns.jointplot(x='winPlacePerc',y='revives',data=data, color='green')
f,ax = plt.subplots(figsize =(20,10))
sns.lineplot(x='boosts', y='winPlacePerc', data=data, color='red',ax=ax)
sns.lineplot(x='heals', y='winPlacePerc', data=data, color='lime',ax=ax)
sns.lineplot(x='revives', y='winPlacePerc', data=data, color='green',ax=ax)
plt.text(70,0.65,'Revives',color='green',fontsize = 17,style = 'italic')
plt.text(70,0.60,'Boosts',color='red',fontsize = 17,style = 'italic')
plt.text(70,0.55,'Heals',color='lime',fontsize = 17,style = 'italic')
plt.xlabel('Healing moves')
plt.grid()
plt.show()
sns.jointplot(x='winPlacePerc',y='weaponsAcquired',data=data, color='red')
sns.jointplot(x='winPlacePerc',y='headshotKills',data=data, color='orange')
sns.jointplot(x='winPlacePerc',y='longestKill',data=data, color='blue')
sns.jointplot(x='winPlacePerc',y='killPoints',data=data, color='green')
plt.scatter(data['winPlacePerc'], data['longestKill'], color='red',alpha=0.2, label='Longest kill')
plt.scatter(data['winPlacePerc'], data['killPoints'],color='green', alpha=0.2, label='Kill points')
plt.scatter(data['winPlacePerc'], data['headshotKills'], color='blue',alpha=0.2, label='Headshot kills')
plt.xlabel('Win place percentage')
plt.legend(loc="upper right")
plt.ylabel('Tactical skills')
plt.grid()
sns.jointplot(x='winPlacePerc',y='rideDistance',data=data, color='black')
sns.jointplot(x='winPlacePerc',y='walkDistance',data=data, color='pink')
sns.jointplot(x='winPlacePerc',y='swimDistance',data=data, color='blue')
plt.scatter(data['winPlacePerc'], data['rideDistance'], color='black',alpha=0.7, label='Ride Distance')
plt.scatter(data['winPlacePerc'], data['walkDistance'],color='pink', alpha=0.7, label='Walk Distance')
plt.scatter(data['winPlacePerc'], data['swimDistance'],color='blue', alpha=0.7, label='Swim Distance')
plt.xlabel('Win place percentage')
plt.legend(loc="upper right")
plt.ylabel('Tactical skills')
plt.grid()
# f,ax = plt.subplots(figsize =(20,10))
sns.catplot(x='matchType', y='winPlacePerc', data=data, kind='strip')
sns.jointplot(x='winPlacePerc',y='matchDuration',data=data, color='brown')
f,ax = plt.subplots(figsize =(20,10))
sns.lineplot(x='headshotKills', y='winPlacePerc', data=data, color='red',ax=ax)
sns.lineplot(x='boosts', y='winPlacePerc', data=data, color='lime',ax=ax)
sns.lineplot(x='heals', y='winPlacePerc', data=data, color='brown',ax=ax)
sns.lineplot(x='DBNOs', y='winPlacePerc', data=data, color='orange',ax=ax)
sns.lineplot(x='kills', y='winPlacePerc', data=data, color='black',ax=ax)
plt.text(70,0.75,'Headshot Kills',color='red',fontsize = 17,style = 'italic')
plt.text(70,0.70,'Heals',color='brown',fontsize = 17,style = 'italic')
plt.text(70,0.65,'Boosts',color='lime',fontsize = 17,style = 'italic')
plt.text(70,0.60,'Knockouts',color='orange',fontsize = 17,style = 'italic')
plt.text(70,0.55,'Kills',color='black',fontsize = 17,style = 'italic')
plt.xlabel('Winning factors')
plt.grid()
plt.show()
plt.scatter(data['winPlacePerc'], data['walkDistance'], color='black',alpha=0.7, label='Walk Distance')
plt.scatter(data['winPlacePerc'], data['damageDealt'], color='yellow',alpha=0.7, label='Damage Dealt')
plt.scatter(data['winPlacePerc'], data['longestKill'],color='blue', alpha=0.7, label='Longest Kill')
plt.xlabel('Win place percentage')
plt.legend(loc="upper right")
plt.ylabel('Winning factors')
plt.grid()
plt.show()
sns.jointplot(x='winPlacePerc',y='killPlace',data=data, color='purple')
